var bundle = (function () {
    'use strict';

    class InfinityArcadeAPI {
      constructor() {
        // TODO: detect
        this.base_url = "http://localhost:3000/api";
      }
      async fetch(url, data = null) {
        console.log(`fetching ${url}...`);
        try {
          let response;
          if (data) {
            response = await fetch(url, {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify(data)
            });
          } else {
            response = await fetch(url);
          }
          const envelope = await response.json();
          if (envelope.status !== "success") {
            throw envelope.message;
          }
          return envelope.data;
        } catch (error) {
          console.error(error);
          throw error;
        }
      }
      async stream(url, data = null) {
        console.log(`streaming ${url}...`);
        try {
          if (!data) {
            return this.fetch(url);
          }
          return fetch(url, {
            method: "POST",
            headers: {
              accept: 'application/x-ndjson'
            },
            "Content-Type": "application/x-www-form-urlencoded;charset=UTF-8",
            body: new URLSearchParams(data)
          });
        } catch (error) {
          console.error(error);
          throw error;
        }
      }
      async createSession() {
        return await this.fetch(`${this.base_url}/session/new`);
      }
      async saveGame(game) {
        return await this.fetch(`${this.base_url}/game/new`, game);
      }
      async generateGame(prompt_text = null) {
        return await this.fetch(`${this.base_url}/game/generate`, {
          prompt_text
        });
      }
      async getArt(slug) {
        return await this.fetch(`${this.base_url}/game/${slug}/art`);
      }
      async *startGame(game, session_id) {
        const response = await this.stream(`${this.base_url}/chat/${game.slug}/start`, {
          session_id
        });
        for await (const token of yieldStreamResponse(response)) {
          yield token;
        }
      }
      async *chat(chat_id, content) {
        const response = await this.stream(`${this.base_url}/chat/`, {
          chat_id,
          content
        });
        for await (const token of yieldStreamResponse(response)) {
          yield token;
        }
      }
    }
    async function* yieldStreamResponse(response) {
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let buffer = "";
      while (true) {
        try {
          const read = await reader.read();
          if (read && !read.done) {
            const raw = decoder.decode(read.value);
            buffer += raw;
            let leftover = "";
            const chunks = buffer.split("\n");
            for (const chunk of chunks) {
              if (chunk) {
                // console.log(`'${chunk}'`);
                try {
                  yield JSON.parse(chunk);
                } catch (e) {
                  leftover += chunk;
                }
              }
            }
            buffer = leftover;
          } else {
            if (buffer) {
              try {
                yield JSON.parse(buffer);
              } catch (e) {
                console.log("ERROR PARSING LEFTOVER", buffer);
              }
            }
            break;
          }
        } catch (e) {
          console.log(e);
          console.error(`error while reading stream for ${chat_id}`);
          break;
        }
      }
    }
    var api = InfinityArcadeAPI;

    function setCookie$1(name, value, days) {
      var expires = "";
      if (days) {
        var date = new Date();
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
        expires = "; expires=" + date.toUTCString();
      }
      document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }
    function getCookie$1(name) {
      var nameEQ = name + "=";
      var ca = document.cookie.split(';');
      for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
      }
      return null;
    }
    function eraseCookie(name) {
      document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    var utils = {
      setCookie: setCookie$1,
      getCookie: getCookie$1,
      eraseCookie
    };

    const {
      getCookie,
      setCookie
    } = utils;
    class InfinityArcade {
      constructor() {
        this.api = new api();
        this.session_id = null;
      }
      get params() {
        return new Proxy(new URLSearchParams(window.location.search), {
          get: (searchParams, prop) => searchParams.get(prop)
        });
      }
      async handleGame() {
        console.log(GAME);
      }
      async handleGenerate() {
        const prompt_text = this.params.prompt_text;
        const game = await this.api.generateGame(prompt_text);
        document.location = `/${game.slug}`;
      }
      static async initialize(api) {
        const ia = new InfinityArcade();
        ia.session_id = await ia.getOrCreateSession();
        console.log(`initialized InfinityArcade with session_id ${ia.session_id}`);
        return ia;
      }
      async getOrCreateSession() {
        let session_id = getCookie("ia_session_id");
        if (!session_id) {
          session_id = await this.api.createSession();
          setCookie("ia_session_id", session_id);
        }
        if (!session_id) {
          throw "Error: Could not create session";
        }
        return session_id;
      }
    }
    var app = InfinityArcade;

    app.initialize().then(ia => {
      window.ia = ia;
    });

    var client = {

    };

    return client;

})();
